Yêu cầu nghiệp vụ chung cho cả 2 phase
1. Có flow login phân quyền rõ ràng cho guest/user
2. Có form nhập liệu và table show data -> ứng với design của DB (đầy đủ chức năng CRUD)
3. Domain các bạn tự chọn (giày dép, sách vở, phim ảnh....)
4. Database trừ bảng login, lần này a muốn có ít nhất 3 table có quan hệ với nhau (tổng ít nhất 4)
5. Mỗi table phải có cột audit time -> create time/update time

Phase 1 mình sẽ dùng java swing và jdbc -> viết chung trên 1 app có giao diện và connect DB
Phase 2 mình sẽ tách app ở phase 1 ra làm 2 app client/server, connect nhau qua TCP và dùng xml protocol


// Login form
package Application;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 * Run application
 * 
 * @author ttl
 *
 */
public class App
{

    static class NewPage extends JFrame
    {
        // constructor
        NewPage()
        {
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Welcome");
            setSize(400, 200);
        }	
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    static class CreateLoginForm extends JFrame implements ActionListener
    {
        // initialize button, panel, label, and text field
        JButton          b1;
        JPanel           newPanel;
        JLabel           userLabel, passLabel;
        final JTextField textField1, textField2;

        // calling constructor
        CreateLoginForm()
        {

            	
        }

        // define abstract method actionPerformed() which will be called on button click
        public void actionPerformed(ActionEvent ae) // pass action listener as a parameter
        {
            String userValue = textField1.getText(); // get user entered username from the textField1
            String passValue = textField2.getText(); // get user entered pasword from the textField2

            // check whether the credentials are authentic or not
            if (userValue.equals("test1@gmail.com") && passValue.equals("test"))
            { // if authentic, navigate user to a new page

                // create instance of the NewPage
                NewPage page = new NewPage();

                // make page visible to the user
                page.setVisible(true);

                // create a welcome label and set it to the new page
                JLabel wel_label = new JLabel("Welcome: " + userValue);
                page.getContentPane().add(wel_label);
            }
            else
            {
                // show error message
                System.out.println("Please enter valid username and password");
            }
        }
    }

    public static void main(String[] args)
    {
        try  
        {  
            //create instance of the CreateLoginForm  
            CreateLoginForm form = new CreateLoginForm();  
            form.setSize(300,100);  //set size of the frame  
            form.setVisible(true);  //make form visible to the user  
        }  
        catch(Exception e)  
        {     
            //handle exception   
            JOptionPane.showMessageDialog(null, e.getMessage());  
        }
    }

}

